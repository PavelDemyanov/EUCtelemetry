{% extends "base.html" %}
{% block content %}
<div class="container mt-4">
    <h2>{{ _('Email Campaigns') }}</h2>

    <!-- Campaign Form -->
    <div class="card mb-4">
        <div class="card-body">
            <h3>{{ _('New Campaign') }}</h3>
            <form method="POST" id="campaignForm">
                {{ form.csrf_token }}
                <div class="mb-3">
                    {{ form.subject.label(class="form-label") }}
                    {{ form.subject(class="form-control") }}
                    {% if form.subject.errors %}
                        {% for error in form.subject.errors %}
                            <div class="text-danger">{{ error }}</div>
                        {% endfor %}
                    {% endif %}
                </div>
                <div class="mb-3">
                    {{ form.html_content.label(class="form-label") }}
                    <div class="text-muted mb-2">
                        <i class="bi bi-markdown"></i> {{ _('You can use Markdown syntax') }}
                    </div>
                    {{ form.html_content(class="form-control", id="editor", rows="15", style="font-family: monospace;") }}
                    {% if form.html_content.errors %}
                        {% for error in form.html_content.errors %}
                            <div class="text-danger">{{ error }}</div>
                        {% endfor %}
                    {% endif %}
                    <small class="text-muted">{{ _('An unsubscribe link will be automatically added to the bottom of the email.') }}</small>
                </div>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="submitSpinner"></span>
                    <span id="submitText">{{ _('Send Campaign') }}</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" id="previewBtn">
                    {{ _('Preview') }}
                </button>
            </form>
            
            <!-- Preview Section -->
            <div class="mt-4 d-none" id="previewSection">
                <h4>{{ _('Preview') }}</h4>
                <div class="border rounded p-4 email-content" id="previewContent">
                </div>
            </div>
        </div>
    </div>

    <!-- Success Alert Template -->
    <div class="alert alert-success alert-dismissible fade d-none" role="alert" id="successAlert">
        <span id="successMessage"></span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <!-- Error Alert Template -->
    <div class="alert alert-danger alert-dismissible fade d-none" role="alert" id="errorAlert">
        <span id="errorMessage"></span>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <!-- Campaign History -->
    <div class="card">
        <div class="card-body">
            <h3>{{ _('Campaign History') }}</h3>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>{{ _('Date') }}</th>
                            <th>{{ _('Subject') }}</th>
                            <th>{{ _('Recipients') }}</th>
                            <th>{{ _('Actions') }}</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for campaign in campaigns %}
                        <tr>
                            <td>{{ campaign.created_at.strftime('%Y-%m-%d %H:%M') }}</td>
                            <td>{{ campaign.subject }}</td>
                            <td>{{ campaign.recipients_count }}</td>
                            <td>
                                <button class="btn btn-sm btn-info view-campaign" 
                                        data-id="{{ campaign.id }}"
                                        data-bs-toggle="modal" 
                                        data-bs-target="#viewCampaignModal">
                                    {{ _('View') }}
                                </button>
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- View Campaign Modal -->
<div class="modal fade" id="viewCampaignModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">{{ _('Campaign Details') }}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="campaignContent"></div>
            </div>
        </div>
    </div>
</div>

<style>
.email-content {
    font-size: 1.1rem;
    line-height: 1.6;
}

.email-content h1 { font-size: 1.8rem; }
.email-content h2 { font-size: 1.6rem; }
.email-content h3 { font-size: 1.4rem; }
.email-content h4 { font-size: 1.2rem; }

.email-content pre {
    background: rgba(0, 0, 0, 0.2);
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
}

.email-content img {
    max-width: 100%;
    height: auto;
}

.email-content blockquote {
    border-left: 4px solid rgba(255, 255, 255, 0.2);
    margin-left: 0;
    padding-left: 1rem;
    font-style: italic;
}
</style>
{% endblock %}

{% block scripts %}
<script>
    // Handle markdown preview
    document.getElementById('previewBtn').addEventListener('click', function() {
        const editorContent = document.getElementById('editor').value;
        const previewSection = document.getElementById('previewSection');
        const previewContent = document.getElementById('previewContent');
        
        // Show preview section
        previewSection.classList.remove('d-none');
        
        // Convert markdown to HTML using fetch
        fetch('/markdown-preview', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ markdown: editorContent })
        })
        .then(response => response.json())
        .then(data => {
            if (data.html) {
                previewContent.innerHTML = data.html;
                // Scroll to preview
                previewSection.scrollIntoView({ behavior: 'smooth' });
            } else {
                throw new Error('{{ _("Error generating preview") }}');
            }
        })
        .catch(error => {
            // Fallback to basic preview if API call fails
            previewContent.innerHTML = '<div class="alert alert-warning">{{ _("Preview not available") }}</div>';
            console.error('Preview error:', error);
        });
    });

    // Handle form submission
    document.getElementById('campaignForm').addEventListener('submit', function(e) {
        e.preventDefault();

        // Disable submit button and show spinner
        const submitBtn = document.getElementById('submitBtn');
        const submitSpinner = document.getElementById('submitSpinner');
        const submitText = document.getElementById('submitText');

        submitBtn.disabled = true;
        submitSpinner.classList.remove('d-none');
        submitText.textContent = '{{ _("Sending...") }}';

        // Send form data
        fetch(window.location.pathname, {
            method: 'POST',
            body: new FormData(this),
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                const successAlert = document.getElementById('successAlert');
                const successMessage = document.getElementById('successMessage');
                successMessage.textContent = data.message;
                successAlert.classList.remove('d-none');
                successAlert.classList.add('show');

                // Reset form
                this.reset();
                
                // Hide preview section
                document.getElementById('previewSection').classList.add('d-none');

                // Refresh the page after 2 seconds to update campaign history
                setTimeout(() => {
                    window.location.reload();
                }, 2000);
            } else {
                throw new Error(data.error || '{{ _("Failed to send campaign") }}');
            }
        })
        .catch(error => {
            // Show error message
            const errorAlert = document.getElementById('errorAlert');
            const errorMessage = document.getElementById('errorMessage');
            errorMessage.textContent = error.message;
            errorAlert.classList.remove('d-none');
            errorAlert.classList.add('show');
        })
        .finally(() => {
            // Re-enable submit button and hide spinner
            submitBtn.disabled = false;
            submitSpinner.classList.add('d-none');
            submitText.textContent = '{{ _("Send Campaign") }}';
        });
    });

    // View campaign content
    document.querySelectorAll('.view-campaign').forEach(button => {
        button.addEventListener('click', async () => {
            const campaignId = button.dataset.id;
            const response = await fetch(`/admin/campaign/${campaignId}`);
            const data = await response.json();
            document.getElementById('campaignContent').innerHTML = data.html_content;
        });
    });
    
    // Add responsive height to the textarea
    const editor = document.getElementById('editor');
    if (editor) {
        editor.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    }
</script>
{% endblock %}